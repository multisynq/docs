import { getArrayExpressionStringProperties, getObjectExpressionStringProperty, } from '../mdx/utils.js';
export const UPDATE_MAX = 15;
export const isFrontmatter = (node) => {
    return (node === null || node === void 0 ? void 0 : node.type) === 'yaml';
};
export const isUpdate = (node) => {
    return (node === null || node === void 0 ? void 0 : node.type) === 'mdxJsxFlowElement' && node.name === 'Update';
};
export const containsUpdates = (tree) => {
    return tree.children.some((child) => isUpdate(child));
};
export const getTags = (node) => {
    let tags = [];
    const tagsAttribute = node.attributes.find((attr) => 'name' in attr && attr.name === 'tags');
    if (!tagsAttribute || !tagsAttribute.value || typeof tagsAttribute.value !== 'object') {
        return tags;
    }
    try {
        tags = JSON.parse(tagsAttribute.value.value);
    }
    catch (_a) {
        tags = getArrayExpressionStringProperties(tagsAttribute);
    }
    if (tags.length > 0) {
        return tags;
    }
    return undefined;
};
export const getRssPropsData = (updateComponent) => {
    const attributes = updateComponent.attributes;
    const rssData = attributes.find((attribute) => attribute.type === 'mdxJsxAttribute' && attribute.name === 'rss');
    const title = getObjectExpressionStringProperty('title', rssData);
    const description = getObjectExpressionStringProperty('description', rssData);
    return { rssTitle: title, rssDescription: description };
};
export const getUpdateTitle = (updateComponent) => {
    var _a;
    const attributes = updateComponent.attributes;
    const label = (_a = attributes.find((attribute) => attribute.type === 'mdxJsxAttribute' && attribute.name === 'label')) === null || _a === void 0 ? void 0 : _a.value;
    if (label) {
        return label.toString();
    }
    return undefined;
};
export const getUpdateDescription = (updateComponent) => {
    var _a;
    const attributes = updateComponent.attributes;
    const descriptionAttribute = (_a = attributes.find((attribute) => attribute.type === 'mdxJsxAttribute' && attribute.name === 'description')) === null || _a === void 0 ? void 0 : _a.value;
    if (descriptionAttribute) {
        return descriptionAttribute.toString();
    }
    return undefined;
};
export const compareUpdates = ({ newTree, previousTree, }) => {
    const newUpdateComponents = newTree.children.filter((child) => isUpdate(child));
    const previousUpdateComponents = previousTree.children
        .filter((child) => isUpdate(child))
        .map(getUpdateTitle);
    const previousUpdateComponentsSet = new Set(previousUpdateComponents);
    const newUpdates = newUpdateComponents.filter((component) => {
        const title = getUpdateTitle(component);
        return !previousUpdateComponentsSet.has(title);
    });
    return newUpdates;
};
